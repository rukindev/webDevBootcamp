body {
	background-color: cornsilk;
}

h1 {
	font-family: roboto;
	padding-left: 2.2em;
	padding-right: 3em;
	border: 1px solid gray;
	background-color: #d9eef1;
}

p {
	font-family: roboto;
	padding-left: 4.5em;
	padding-right: 4.5em;
	color: darkgrey;
}

/* ( X + Y ) = Adjacent selector. It will select only the element 
that is immediately preceded by the former element*/
h1 + p {
	color: gray;
	font-size: 24px;
	padding-left: 3em;
	padding-right: 3em;
}

h3 {
	color: darksalmon;
	font-family: roboto;
	padding-left: 3.8em;
}

h4 {
	color: darkgrey;
	font-family: roboto;
	padding-left: 4.4em;
}

form {
/* Center the form on the page */
	margin: 0 auto;
	width: 400px;
/* Form outline */
	padding: 1em;
	border: 1px solid #CCC;
	border-radius: 1em;
}

ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

form li + li {
  margin-top: 0.5em;
}

label {
  /* Uniform size & alignment */
  display: inline-block;
  width: 90px;
  text-align: left;
}

.button {
 /* Align buttons with the text fields */
  padding-left: 90px; /* same size as the label elements */
}

button {
/* This extra margin represent roughly the same space as the space
 between the labels and their text fields */
  margin-left: .5em;
}

/*Id Selector*/
#btn-id {
	background-color: #ffffc7;
	color: tomato;
}

/*Class Selector*/
.buble {
	background-color: #d9eef1;
}

.gold {
	background-color: #ffffc7;
}

/* ( X Y ) = Descendant Selector,  the most commented selector. For example, what if, 
rather than targeting all anchor tags, you only need to target the anchors which are 
within an unordered list? This is specifically when you'd use a descendant selector. 
li a { color: blue; } */

/* ( X:visited and X:link ) = We use the (:link) pseudo-class to target all anchors tags 
which have to be clicked on. Alternatively (:visited) to apply specific styling to 
only the anchor tags on the page which have been clicked on, or visited.
a:link { color: blue; } a:visited { color: purple; }*/

/* ( X > Y ) = Child combinator. The difference between (x y) and (x > y) is that the latter will
only select direct children. ex.: 

<div id="container">
  <ul>
    <li> List Item
      <ul>
        <li> Child </li>
      </ul>
    </li>
    <li> List Item </li>
    <li> List Item </li>
    <li> List Item </li>
  </ul>
</div>

A selector of ( #container > ul ) will only target the <ul>'s which are direct children of the (div)
with an (id) of (container). It will no target the <ul> that is a children of the first <li>*/


.fruits > li {
	background-color: yellow;
}




