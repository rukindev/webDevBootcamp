Here’s what you’ll learn if you follow this guide:
HTML/CSS
jQuery
JavaScript
Git/Version Control
React
Node.js
MongoDB


#1. The Web Development Bootcamp
First thing’s first — You need to learn the basics and build a solid foundation of web development principles. There are many ways to do this, but in my opinion, this is the best and easiest way.


#2. The Advanced Web Development Bootcamp
Now that you’ve taken the first bootcamp and know how to build full stack web applications, it’s time to take your learning a little deeper. This course builds upon the first by introducing more complex technologies, frameworks, and tools you can use to build beautiful, responsive, web applications.

    The Advanced Web Developer Bootcamp - Udemy
    Learn React 16, Redux, D3, ES2015, Testing, CSS Flexbox, Animations, SVG, AJAX, and more!
    bit.ly

The Advanced Web Development Bootcamp is designed to take your coding skills to the next level! Don’t worry, this course is also project based. You’ll build 10+ projects and explore dozens of code challenges with solutions to ensure you understand everything!
Here’s what you’ll learn in this course:
Build upon your CSS Skills by learning CSS3 Transitions, Transforms and Animations
Dive into a front-end Framework and learn React, React-Router, and Redux
Enhance your JavaScript skills with ES2015, ES2016, and ES2017, as well as Callbacks, Promises, Generators and Async Functions
Building charts, force graphs and data visualizations
Testing with Jasmine
D3
SVG
Building Node.js APIs
Building Single Page Applications
Object Oriented Programming in JavaScript
Closures and the keyword ‘this’
Functional Programming in JavaScript
Authentication and Authorization
Asynchronous Code with JavaScript
This course has nearly 350 lectures and 30 hours of content, you’re going to learn a lot!!


#3. Reinforce your Skills
At this point, you’ve taken two online coding bootcamps and you’re hopefully starting to feel comfortable with your web development skills. You can successfully take a simple idea and build it out beautifully using a Node.js backend, and React on the front-end. Plus, you’re confident in your CSS abilities to style out a mobile first, responsive page.

Now it’s time to continue learning while reinforcing your new skills. Below is a list of documentation, articles, and tutorials.
Reading these a few months ago probably would’ve made no sense — but with your new skills you can handle them like a champ.
You don’t have to work through every link I’ve provided. Think of these more like starting points.

HTML/CSS
    MDN HTML Documentation (https://developer.mozilla.org/en-US/docs/Learn/HTML)
    Flexbox Froggy (http://flexboxfroggy.com/)
    The CSS Box Model (https://css-tricks.com/the-css-box-model/)
    Bootstrap (http://getbootstrap.com/)

JavaScript
    JavaScript — The keyword ‘this’ for beginners (https://codeburst.io/javascript-the-keyword-this-for-beginners-fb5238d99f85)
    JavaScript — Arrow Functions for Beginners (https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc)
    JavaScript: What the heck is a Callback? (https://codeburst.io/javascript-what-the-heck-is-a-callback-aba4da2deced)
    JavaScript: What the heck is an Immediately-Invoked Function Expression? (https://codeburst.io/javascript-what-the-heck-is-an-immediately-invoked-function-expression-a0ed32b66c18)
    JavaScript for Beginners: The new Operator (https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e)
    Javascript: Learn Regular Expressions for Beginners (https://codeburst.io/javascript-learn-regular-expressions-for-beginners-bb6107015d91)
    JavaScript Template Literals and Tag Functions for Beginners (https://codeburst.io/javascript-template-literals-tag-functions-for-beginners-758a041160e1)
    JavaScript & the spread operator (https://codeburst.io/javascript-the-spread-operator-a867a71668ca)
    JavaScript: What is short-circuit evaluation? (https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c)
    JavaScript: What is the ternary operator? (https://codeburst.io/javascript-what-is-the-ternary-operator-c819af8a7f6c)
    JavaScript: Why does 3 + true = 4? (and 7 other tricky equations) (https://codeburst.io/javascript-why-does-3-true-4-and-7-other-tricky-equations-9dd13cb2a92a)
    JavaScript — What’s the difference between Null & Undefined? (https://codeburst.io/javascript-whats-the-difference-between-null-undefined-37793b5bfce6)
    Learn and Understand Recursion in JavaScript (https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea)
    Understand Closures in JavaScript (https://codeburst.io/understand-closures-in-javascript-d07852fa51e7)
    JavaScript 30 for 30 — Learn to build 30 things in 30 days with 30 tutorials. No Frameworks, No Compilers, No Libraries, No Boilerplate. (https://javascript30.com/)
    Learn FrontEnd Frameworks — Free 8 Week course focused on JavaScript Frameworks. Learn to build SPA’s (Single Page Applications) in both Angular and Ember from scratch. (https://www.udacity.com/course/front-end-frameworks--ud894)

React
    create-react-app — Learn the quickest way to get started with React. (https://github.com/facebookincubator/create-react-app)
    react-router — Simple routing for React. (https://github.com/ReactTraining/react-router)
    Navigating the React.JS Ecosystem (https://www.toptal.com/react/navigating-the-react-ecosystem)
    Official React Tutorial (https://facebook.github.io/react/tutorial/tutorial.html)

Full Stack
    Intro to Back End Web Development (https://www.udacity.com/course/intro-to-backend--ud171)
    Deploying Applications with Heroku (https://www.udacity.com/course/deploying-applications-with-heroku--ud272)
    Client Server Communication (https://www.udacity.com/course/client-server-communication--ud897)
    Serverless Stack is a comprehensive guide to creating full-stack serverless applications. Create a note taking app from scratch using React.js, AWS Lambda, API Gateway,    DynamoDB, and Cognito. (http://serverless-stack.com/)
    Node JS and Authentication (https://blog.risingstack.com/node-hero-node-js-authentication-passport-js/)
    Express JS Database Integration (https://expressjs.com/en/guide/database-integration.html)

Databases
    Relational vs. Non Relational (https://www.pluralsight.com/blog/software-development/relational-non-relational-databases)
    SQL vs. NoSQL (https://www.sitepoint.com/sql-vs-nosql-differences/)
    Learn MongoDB — Free courses & tutorials (https://university.mongodb.com/)
    Express — Using a DB with Mongoose (https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose)
    Node JS and Databases (https://blog.risingstack.com/node-js-database-tutorial/)

Git
    New Developer? You should’ve learned Git yesterday. (https://codeburst.io/number-one-piece-of-advice-for-new-developers-ddd08abc8bfa)
    A Step by Step Guide to Making Your First GitHub Contribution (https://codeburst.io/a-step-by-step-guide-to-making-your-first-github-contribution-5302260a2940)

Deployment
    Heroku (https://www.heroku.com/)
    Now (https://zeit.co/now)
    Deploying Applications with Heroku (https://www.udacity.com/course/deploying-applications-with-heroku--ud272)


#4. [Optional] Courses

Want to keep learning? Here are some additional courses that I recommend that dive deeper into the subject of your choosing:
    Build React JS Projects (http://bit.ly/2z3luG6)
    Build Node.js Projects (http://bit.ly/2yL3i2Q)
    Learn Advanced JavaScript (http://bit.ly/2gzSgU7)


#5. Coding Games

Level up your skills in your free time with these fun coding games and challenge websites.
    Codechef (https://www.codechef.com/)
    Code Wars (https://www.codewars.com/)
    Coding Game (https://www.codingame.com/)
    Hacker Rank (https://www.hackerrank.com/domains/cpp/cpp-introduction)


#6. Build Something

Go forth and build something cool! Show off all of the skills you’ve learned and bring an idea from concept to production!
Need some help brainstorming what to build? Here are a few links that should have you thinking in the right direction:

    94 Full Stack Examples (https://react.rocks/tag/FullStack?show=40)
    6 Absurd Ideas For Building Your First Web App (https://medium.freecodecamp.org/6-absurd-ideas-for-building-your-first-web-application-24afca35e519)
    Fullstack Student Final Projects (https://www.fullstackacademy.com/student-gallery)
    Web app ideas for the growing web developer (https://www.reddit.com/r/webdev/comments/3we48y/web_app_ideas_for_the_growing_web_developer/)

Make sure to open source your project so you can show off everything you’ve learned. The first bootcamp goes into Git and GitHub with great depth, but if you’re still not feeling comfortable with it, you can check out these two links for a little additional motivation and help:
    New Developer? You should’ve learned Git yesterday. (https://codeburst.io/number-one-piece-of-advice-for-new-developers-ddd08abc8bfa)
    A Step by Step Guide to Making Your First GitHub Contribution (https://codeburst.io/a-step-by-step-guide-to-making-your-first-github-contribution-5302260a2940)


#7. Resume & Portfolio

You’ve learned the skills, now it’s time to make your resume shine and make your portfolio stand out. Here’s a collection of links to help you accomplish that:
Make your portfolio
    Customizable Web Developer Portfolio — Built with Flexbox. (https://github.com/bmorelli25/portfolio-template)
    10 Awesome Web Developer Portfolios (https://codeburst.io/10-awesome-web-developer-portfolios-d266b32e6154)

How to Apply
    I spent 3 months applying to jobs after a coding bootcamp. Here’s what I learned. (FCC) (https://medium.freecodecamp.com/5-key-learnings-from-the-post-bootcamp-job-search-9a07468d2331#.lpuzt5pnw)
    Lessons from my Post-bootcamp Job search (FCC) (https://medium.freecodecamp.com/lessons-from-my-post-bootcamp-job-search-in-london-cb37ea12ec2f#.u83avhawf)
    How to land a six figure job in tech with no connections (FCC) (https://medium.freecodecamp.com/how-you-can-land-a-6-figure-job-in-tech-with-no-connections-6eed0de26ea4#.9cc270q7j)

Resume & LinkedIn
    What are some of the best resume formats you’ve seen? (https://www.reddit.com/r/cscareerquestions/comments/5gnmkj/what_are_some_of_the_best_resu%D0%BCe_formats_youve/)
    Model examples for Fullstack Developer LinkedIn profiles (https://www.reddit.com/r/cscareerquestions/comments/5f5e3f/what_are_some_model_examples_for_fullstack/)

Personal Projects
    Recruiters, what kind of CS projects impress? (https://www.reddit.com/r/cscareerquestions/comments/586lbg/recruiters_what_kind_of_cs_projects_impress/)


#8. Interview Prep
Your resume and portfolio got you the interview! Awesome! Use these links to prepare for your interview:
    CS50 — Prep and Practice for Technical Interviews [YouTube] (https://youtu.be/qIi-tIrcaww?t=2m32s)
    How to Break Into the Tech Industry — a Guide to Job Hunting and Tech Interviews (http://haseebq.com/how-to-break-into-tech-job-hunting-and-interviews/)
    Common JavaScript Interview Questions and Answers (https://www.reddit.com/r/learnprogramming/comments/5sa35k/fun_github_repo_containing_common_interview/)
    Ammon Bartram — Ask an interviewer anything: interview questions, answers, mistakes (https://www.reddit.com/r/cscareerquestions/comments/5y95x6/i_am_ammon_bartram_and_i_have_done_900/)
    Sharing some interview tips (Silicon valley employee) (https://www.reddit.com/r/cscareerquestions/comments/5w2oyn/sharing_some_interview_tips/)
    Job interview questions to ask the interviewer (https://www.reddit.com/r/AskReddit/comments/5iqnkj/at_the_end_of_a_job_interview_they_always_ask/)
    I suck at programming interviews. (https://www.reddit.com/r/cscareerquestions/comments/5dk7we/i_suck_at_programming_interviews_maybe_i_suck_too/)
    When solving an interview problem, talk all the time. (https://www.reddit.com/r/cscareerquestions/comments/58htcc/when_solving_an_interview_problem_talk_all_the/)
    Hiring managers (or other seasoned developers), what qualities do you look for in your ideal candidate? (https://www.reddit.com/r/cscareerquestions/comments/5557j0/hiring_managers_or_other_seasoned_developers_what/)
    Post your best interview questions (https://www.reddit.com/r/cscareerquestions/comments/4rdcy0/post_your_best_interview_questions/)
    Been interviewing with a lot of tech startups as a frontend dev, here are the technical questions I’ve been asked (MID-SENIOR LEVEL) (https://www.reddit.com/r/webdev/comments/3f7q3q/been_interviewing_with_a_lot_of_tech_startups_as/)
    10 Interview Questions every JS Developer should know (Medium) (https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.v0dk97v5v)


#9. Salary Information
You’ve gotten the offer! Now you just need to negotiate your compensation package. Here are a collection of links to help:
    How Much Do Software Developers Make in 2017?(https://codeburst.io/how-much-do-software-developers-make-in-2017-e6ae657966be)
    12/2016 Salary Sharing Thread (<2 yrs Experience)(https://www.reddit.com/r/cscareerquestions/comments/5h6xvj/official_salary_sharing_thread_for_new_grads/)
    Salary Negotiations and how not to set a bunch of money on fire (Medium) (https://medium.freecodecamp.com/salary-negotiation-how-not-to-set-a-bunch-of-money-on-fire-605aabbaf84b#.75xz4zut8)
    10 Rules for negotiating a job offer (Medium) (https://medium.freecodecamp.com/ten-rules-for-negotiating-a-job-offer-ee17cccbdab6#.g8u1wnyw8)
    How not to bomb your offer negotiation (Medium) (https://medium.freecodecamp.com/how-not-to-bomb-your-offer-negotiation-c46bb9bc7dea#.vdfc82rl7)